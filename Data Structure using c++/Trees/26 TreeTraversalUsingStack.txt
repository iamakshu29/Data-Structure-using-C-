#include<iostream>
using namespace std;

class node
{
public:
     node *left;
     int   data; // this int data store tree value
    node *right;

    // they both are for Queue
    node *Data;
    node *next;

    //
    node *DATA;
    node *Next;
};

class Stack
{
private:
    node *top;
public:
    Stack()
    {
        top = nullptr;
    }
    void Push(node *x);
    void Pop();
    int isEmpty();
    int isFull();
    node* Stack_Top();
};

void Stack::Push(node *x)
{
    node *t;
    t = new node;
    if(t == nullptr)
        cout << "Stack is full can't make a new node: " << endl;
    else
    {
        t->DATA = x;
        t->Next = top;
        top = t;
    }
}
void Stack::Pop()
{
    if(top == nullptr)
        cout << "Stack is empty: " << endl;
    else
    {
        node *t;
        t = top;
        node *x = top->DATA;
        top = top->Next;
        free(t);
       // cout << "popped element is: " << x << endl;
    }
}

int Stack::isEmpty()
{
    if(top == nullptr)
        return 1;
    else
        return 0;
}
int Stack::isFull()
{
    node *t = new node;
    if(t == nullptr)
        return 1;
    else
        return 0;
}

node* Stack::Stack_Top()
{
    if(top==nullptr)
        return 0;
    else
        return top->DATA;
}

class Queue
{
public:
    node *Front;
    node *Rear;
        Queue()
        {
            Front = nullptr;
            Rear = nullptr;
        }
    void enqueue(node *x); // here also change from int to node *
    void dequeue();
    int isEmpty();
    int isFull();

};
void Queue::enqueue(node *x)
{
    node *t = new node;
    t->Data = x;
    t->next = nullptr;
    if(t == nullptr)
        cout << "Queue is Full: " << endl;
    else
    {
        if(Front == nullptr)
            {
                Front = Rear = t;
            }
        else
        {
            Rear->next = t;
            Rear = t;
        }
    }
}

void Queue::dequeue()
{
    node *x; // here also change from int to node *
    if(Front == nullptr)
        cout << "Queue is Empty: " << endl;
    else
    {
        node *t = Front;
        x = t->Data;
        Front = Front->next;
        free(t);
       // cout << "Deleted element is: " << x << endl;
    }
}

int Queue::isEmpty()
{
    if(Front == nullptr)
        return 1;
    else
        return 0;
}

int Queue::isFull()
{
    node *t = new node;
    if(t == nullptr)
        return 1;
    else
        return 0;
}




class Tree
{
public: // here root pointer points to node datatype is made in public class
        // so to do the minimum changes we can or make short code....
    node *root;
    Tree()
    {
        root = nullptr;
    }
    void Create_Tree(); // not take any parameter bcoz root is in class
    void Preorder(node *p);
    void Postorder(node *p);
    void Inorder(node *p);
    void Levelorder(node *p);
    int height(node *root);
    int Count(node *root);
    node* Get_root(){return root;} // this func not need
                                //see the comments in main function
};


void Tree::Create_Tree()
{
    node *p = nullptr;
    node *t = nullptr;
    Queue q; // here I didn't take any size it is 10 coz of default constructor
    int y{0}; // initialize *p,*q,x,Queue q;

    cout << "Enter the root value: " << endl;
    cin >> y;
    root = new node;
    root->left = nullptr;
    root->data = y;
    root->right = nullptr;
    q.enqueue(root);

    while(!q.isEmpty())
    {
        p = q.Front->Data;
        q.dequeue();
        cout << "Enter the left child of " << p->data << endl;
        cin >> y;
        if(y!= -1)
        {
            t = new node;
            t->left = nullptr;
            t->data = y;
            t->right = nullptr;
            p->left = t;
            q.enqueue(t);
        }

        cout << "Enter the right child of " << p->data << endl;
        cin >> y;
        if(y!= -1)
        {
            t = new node;
            t->left = nullptr;
            t->data = y;
            t->right = nullptr;
            p->right = t;
            q.enqueue(t);
        }
    }

}

void Tree::Preorder(node *p)
{
    {
        Stack stk;
        while(p || !stk.isEmpty())
        {
            if(p)
            {
                cout << p->data << " " ;
                stk.Push(p);
                p=p->left;
            }
            else
            {
                p = stk.Stack_Top();
                stk.Pop();
                p=p->right;
            }
        }
    }
}

void Tree::Inorder(node *p)
{
    Stack stk;
    while(p || !stk.isEmpty())
    {
        if(p)
        {
            stk.Push(p);
            p=p->left;
        }
        else
        {
            p = stk.Stack_Top();
            stk.Pop();
            cout << p->data << " " ;
            p=p->right;
        }
    }
}

int main()
{
    Tree t;
    cout << "Tree is: " << endl;
    t.Create_Tree();

    cout << "\nPre order of tree is: " << endl;
    // no need for t.Get_root()
    t.Preorder(t.root); // here there is no need to use the get function
                       // to return the value of root because it is public
    cout << "\nPost order of tree is: " << endl;

    t.Inorder(t.root);

    return 0;
}
